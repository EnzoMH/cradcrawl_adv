================================================================================
                          GCP 배포 상세 계획서 (SSH 원격 관리 중심)
================================================================================

📋 프로젝트 개요
================================================================================
• 프로젝트명: 교회/기관 크롤링 CRM 시스템 GCP 배포
• 현재 상태: FastAPI 기반 로컬 애플리케이션
• 목표: Google Cloud Platform Compute Engine 기반 배포
• 배포 방식: SSH 원격 접속을 통한 완전한 서버 제어
• 예상 운영 기간: 3-6개월 (GCP $300 무료 크레딧 활용)
• 핵심 특징: 전통적인 VPS 방식 + 클라우드 혜택

🎯 GCP 서비스 선택 및 구성 (SSH 중심)
================================================================================

선택된 GCP 서비스:
✅ Compute Engine (e2-medium) - SSH 접속 가능한 가상머신
✅ Persistent Disk - SSD 영구 디스크 (30GB)
✅ VPC Network - 전용 네트워크 구성
✅ Cloud Firewall - SSH(22), HTTP(80), HTTPS(443) 포트 개방
✅ External IP - 고정 외부 IP 주소
✅ Cloud Storage - 백업 및 정적 파일 저장
✅ Cloud DNS - 도메인 연결 (선택사항)
✅ Cloud Monitoring - 서버 모니터링

SSH 접속 환경:
• OS: Ubuntu 22.04 LTS (최신 안정 버전)
• SSH 키 기반 인증 (비밀번호 로그인 비활성화)
• 포트 포워딩을 통한 개발 환경 연결
• VS Code Remote SSH 확장 지원
• 터미널 기반 완전한 서버 관리

💰 비용 분석 (무료 크레딧 활용)
================================================================================

$300 무료 크레딧 사용 계획:
• Compute Engine (e2-medium): ~$45/월
  - 2 vCPU, 4GB RAM (크롤링 작업에 충분)
  - 24시간 운영 기준
• Persistent Disk (30GB SSD): ~$6/월
• External Static IP: ~$3/월
• Cloud Storage (백업용): ~$2/월
• 네트워크 트래픽: ~$4/월
• 총 예상 비용: ~$60/월 → 5개월 운영 가능

Always Free 활용 방안:
• e2-micro 인스턴스로 다운그레이드 시 영구 무료 (월 750시간)
• Cloud Storage 5GB 무료
• 네트워크 트래픽 1GB/월 무료 (북미 기준)

🏗️ 아키텍처 설계 (SSH 기반)
================================================================================

물리적 구조:
[개발자 PC] --SSH--> [GCP Compute Engine] ---> [SQLite/PostgreSQL]
     ↓                        ↓                        ↓
[VS Code Remote]         [Docker 컨테이너]         [Cloud Storage 백업]
     ↓                        ↓                        ↓
[로컬 개발환경]            [FastAPI 앱]            [자동 백업 스크립트]

네트워크 구성:
• VPC: custom-vpc (10.0.0.0/16)
• 서브넷: main-subnet (10.0.1.0/24)
• 방화벽 규칙:
  - SSH (22): 개발자 IP만 허용
  - HTTP (80): 전체 허용
  - HTTPS (443): 전체 허용
  - Custom (8000): FastAPI 개발 서버용

SSH 접속 설정:
• 키 기반 인증 (RSA 4096bit)
• SSH 설정 파일 자동 구성
• 포트 포워딩으로 로컬 개발 환경 연결
• tmux/screen을 통한 세션 관리

📦 배포 준비 작업 (SSH 중심)
================================================================================

Phase 1: GCP 인프라 구축 (1일)
────────────────────────────────────────────────────

1.1 Compute Engine 인스턴스 생성
```bash
# gcloud CLI를 통한 인스턴스 생성
gcloud compute instances create church-crm-server \
    --zone=us-central1-a \
    --machine-type=e2-medium \
    --network-interface=network-tier=PREMIUM,stack-type=IPV4_ONLY,subnet=default \
    --maintenance-policy=MIGRATE \
    --provisioning-model=STANDARD \
    --service-account=<service-account-email> \
    --scopes=https://www.googleapis.com/auth/cloud-platform \
    --create-disk=auto-delete=yes,boot=yes,device-name=church-crm-server,image=projects/ubuntu-os-cloud/global/images/ubuntu-2204-jammy-v20231213,mode=rw,size=30,type=projects/<project-id>/zones/us-central1-a/diskTypes/pd-ssd \
    --no-shielded-secure-boot \
    --shielded-vtpm \
    --shielded-integrity-monitoring \
    --labels=project=church-crm,environment=production \
    --reservation-affinity=any
```

1.2 고정 IP 주소 할당
```bash
# 고정 IP 생성
gcloud compute addresses create church-crm-ip --region=us-central1

# 인스턴스에 고정 IP 할당
gcloud compute instances add-access-config church-crm-server \
    --zone=us-central1-a \
    --access-config-name="external-nat" \
    --address=<static-ip>
```

1.3 방화벽 규칙 설정
```bash
# SSH 접속 (개발자 IP만 허용)
gcloud compute firewall-rules create allow-ssh-from-dev \
    --allow tcp:22 \
    --source-ranges=<your-ip>/32 \
    --target-tags=ssh-allowed

# HTTP/HTTPS 웹 트래픽
gcloud compute firewall-rules create allow-web-traffic \
    --allow tcp:80,tcp:443 \
    --source-ranges=0.0.0.0/0 \
    --target-tags=web-server

# FastAPI 개발 서버
gcloud compute firewall-rules create allow-fastapi-dev \
    --allow tcp:8000 \
    --source-ranges=<your-ip>/32 \
    --target-tags=dev-server

# 인스턴스에 태그 적용
gcloud compute instances add-tags church-crm-server \
    --zone=us-central1-a \
    --tags=ssh-allowed,web-server,dev-server
```

Phase 2: SSH 환경 구성 (0.5일)
────────────────────────────────────────────────────

2.1 SSH 키 생성 및 등록
```bash
# 로컬에서 SSH 키 생성
ssh-keygen -t rsa -b 4096 -f ~/.ssh/gcp_church_crm -C "your-email@example.com"

# 공개키를 GCP에 등록
gcloud compute os-login ssh-keys add --key-file=~/.ssh/gcp_church_crm.pub

# 또는 메타데이터를 통한 등록
gcloud compute project-info add-metadata \
    --metadata-from-file ssh-keys=~/.ssh/gcp_church_crm.pub
```

2.2 SSH 설정 파일 구성
```bash
# ~/.ssh/config 파일 설정
cat >> ~/.ssh/config << EOF
Host church-crm
    HostName <static-ip>
    User <username>
    IdentityFile ~/.ssh/gcp_church_crm
    Port 22
    ServerAliveInterval 60
    ServerAliveCountMax 3
    
    # 포트 포워딩 설정
    LocalForward 8000 localhost:8000  # FastAPI 개발 서버
    LocalForward 5432 localhost:5432  # PostgreSQL (필요시)
    LocalForward 3000 localhost:3000  # 프론트엔드 개발 서버
EOF
```

2.3 VS Code Remote SSH 설정
```json
// .vscode/settings.json
{
    "remote.SSH.remotePlatform": {
        "church-crm": "linux"
    },
    "remote.SSH.defaultExtensions": [
        "ms-python.python",
        "ms-python.black-formatter",
        "ms-python.pylint",
        "ms-vscode.vscode-json",
        "redhat.vscode-yaml",
        "ms-vscode.remote-explorer"
    ],
    "python.defaultInterpreterPath": "/home/<username>/church-crm/venv/bin/python"
}
```

Phase 3: 서버 환경 구축 (1일)
────────────────────────────────────────────────────

3.1 기본 패키지 설치
```bash
# SSH로 서버 접속
ssh church-crm

# 시스템 업데이트
sudo apt update && sudo apt upgrade -y

# 필수 패키지 설치
sudo apt install -y \
    python3.11 \
    python3.11-venv \
    python3-pip \
    git \
    curl \
    wget \
    unzip \
    htop \
    tree \
    tmux \
    nginx \
    postgresql \
    postgresql-contrib \
    redis-server \
    docker.io \
    docker-compose

# Python 가상환경 생성
python3.11 -m venv ~/church-crm/venv
source ~/church-crm/venv/bin/activate
```

3.2 프로젝트 배포
```bash
# 프로젝트 클론 (GitHub에서)
cd ~
git clone https://github.com/your-username/advanced_crawling.git church-crm
cd church-crm

# 가상환경 활성화
source venv/bin/activate

# 의존성 설치
pip install --upgrade pip
pip install -r requirements.txt

# 추가 시스템 의존성 (Selenium용)
sudo apt install -y chromium-browser chromium-chromedriver

# 환경변수 설정
cp .env.example .env
nano .env  # 설정 편집
```

3.3 데이터베이스 설정
```bash
# PostgreSQL 설정 (선택사항)
sudo -u postgres createuser --interactive church_crm_user
sudo -u postgres createdb church_crm_db -O church_crm_user

# SQLite 사용시 (기본)
mkdir -p ~/church-crm/database
chmod 755 ~/church-crm/database

# 기존 데이터 마이그레이션 (로컬에서 업로드)
scp database/churches_crm.db church-crm:~/church-crm/database/
```

Phase 4: 웹서버 및 프로세스 관리 (1일)
────────────────────────────────────────────────────

4.1 Nginx 설정
```nginx
# /etc/nginx/sites-available/church-crm
server {
    listen 80;
    server_name <your-domain> <static-ip>;
    
    # 정적 파일 서빙
    location /templates/ {
        alias /home/<username>/church-crm/templates/;
        expires 1d;
        add_header Cache-Control "public, immutable";
    }
    
    # FastAPI 애플리케이션 프록시
    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 86400;
    }
}
```

4.2 Systemd 서비스 설정
```ini
# /etc/systemd/system/church-crm.service
[Unit]
Description=Church CRM FastAPI Application
After=network.target

[Service]
Type=simple
User=<username>
Group=<username>
WorkingDirectory=/home/<username>/church-crm
Environment=PATH=/home/<username>/church-crm/venv/bin
ExecStart=/home/<username>/church-crm/venv/bin/python -m uvicorn crm_app:app --host 0.0.0.0 --port 8000
ExecReload=/bin/kill -HUP $MAINPID
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
```

4.3 프로세스 관리 스크립트
```bash
#!/bin/bash
# ~/church-crm/scripts/manage.sh

case "$1" in
    start)
        sudo systemctl start church-crm
        sudo systemctl start nginx
        echo "Church CRM started"
        ;;
    stop)
        sudo systemctl stop church-crm
        sudo systemctl stop nginx
        echo "Church CRM stopped"
        ;;
    restart)
        sudo systemctl restart church-crm
        sudo systemctl restart nginx
        echo "Church CRM restarted"
        ;;
    status)
        sudo systemctl status church-crm
        sudo systemctl status nginx
        ;;
    logs)
        sudo journalctl -u church-crm -f
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|status|logs}"
        exit 1
        ;;
esac
```

Phase 5: 모니터링 및 백업 (0.5일)
────────────────────────────────────────────────────

5.1 시스템 모니터링 스크립트
```bash
#!/bin/bash
# ~/church-crm/scripts/monitor.sh

# 시스템 리소스 체크
echo "=== System Resources ==="
echo "CPU Usage: $(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | awk -F'%' '{print $1}')"
echo "Memory Usage: $(free | grep Mem | awk '{printf("%.2f%%", $3/$2 * 100.0)}')"
echo "Disk Usage: $(df -h / | awk 'NR==2{printf "%s", $5}')"

# 애플리케이션 상태 체크
echo -e "\n=== Application Status ==="
if systemctl is-active --quiet church-crm; then
    echo "Church CRM: Running"
else
    echo "Church CRM: Stopped"
fi

if systemctl is-active --quiet nginx; then
    echo "Nginx: Running"
else
    echo "Nginx: Stopped"
fi

# 데이터베이스 크기 체크
echo -e "\n=== Database Status ==="
if [ -f ~/church-crm/database/churches_crm.db ]; then
    echo "Database size: $(du -h ~/church-crm/database/churches_crm.db | cut -f1)"
    echo "Last modified: $(stat -c %y ~/church-crm/database/churches_crm.db)"
fi

# 로그 파일 크기 체크
echo -e "\n=== Log Files ==="
if [ -d ~/church-crm/logs ]; then
    du -h ~/church-crm/logs/*.log 2>/dev/null | head -5
fi
```

5.2 자동 백업 스크립트
```bash
#!/bin/bash
# ~/church-crm/scripts/backup.sh

BACKUP_DIR="/home/<username>/backups"
DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_FILE="church_crm_backup_$DATE.tar.gz"

# 백업 디렉토리 생성
mkdir -p $BACKUP_DIR

# 데이터베이스 및 설정 파일 백업
tar -czf $BACKUP_DIR/$BACKUP_FILE \
    ~/church-crm/database/ \
    ~/church-crm/.env \
    ~/church-crm/logs/ \
    --exclude='*.log'

# Cloud Storage로 업로드
gsutil cp $BACKUP_DIR/$BACKUP_FILE gs://church-crm-backups/

# 로컬 백업 파일 정리 (7일 이상 된 파일 삭제)
find $BACKUP_DIR -name "church_crm_backup_*.tar.gz" -mtime +7 -delete

echo "Backup completed: $BACKUP_FILE"
```

5.3 Cron 작업 설정
```bash
# crontab -e
# 매일 새벽 2시 자동 백업
0 2 * * * /home/<username>/church-crm/scripts/backup.sh >> /home/<username>/church-crm/logs/backup.log 2>&1

# 매시간 시스템 모니터링
0 * * * * /home/<username>/church-crm/scripts/monitor.sh >> /home/<username>/church-crm/logs/monitor.log 2>&1

# 매주 일요일 시스템 업데이트
0 3 * * 0 sudo apt update && sudo apt upgrade -y >> /home/<username>/church-crm/logs/system_update.log 2>&1
```

🚀 SSH 원격 개발 워크플로우
================================================================================

일상적인 개발 프로세스:

1. 로컬에서 SSH 접속:
```bash
ssh church-crm
```

2. VS Code Remote SSH로 원격 개발:
```bash
# VS Code에서 Ctrl+Shift+P
> Remote-SSH: Connect to Host...
> church-crm 선택
```

3. tmux 세션 관리:
```bash
# 새 세션 생성
tmux new-session -d -s church-crm

# 세션 재연결
tmux attach-session -t church-crm

# 세션 목록 확인
tmux list-sessions
```

4. 애플리케이션 관리:
```bash
# 개발 모드로 실행
cd ~/church-crm
source venv/bin/activate
python -m uvicorn crm_app:app --reload --host 0.0.0.0 --port 8000

# 프로덕션 모드 관리
sudo systemctl restart church-crm
sudo systemctl status church-crm
```

5. 로그 모니터링:
```bash
# 실시간 로그 확인
tail -f ~/church-crm/logs/app.log
sudo journalctl -u church-crm -f

# 에러 로그 검색
grep -i error ~/church-crm/logs/*.log
```

🔧 개발 도구 설정
================================================================================

Git 설정:
```bash
# 서버에서 Git 설정
git config --global user.name "Your Name"
git config --global user.email "your-email@example.com"

# SSH 키로 GitHub 연결
ssh-keygen -t rsa -b 4096 -C "your-email@example.com"
cat ~/.ssh/id_rsa.pub  # GitHub에 추가
```

Python 개발 환경:
```bash
# 개발용 패키지 추가 설치
pip install \
    black \
    pylint \
    pytest \
    ipython \
    jupyter \
    debugpy
```

데이터베이스 관리 도구:
```bash
# SQLite 브라우저 (웹 기반)
pip install sqlite-web
sqlite_web ~/church-crm/database/churches_crm.db --host 0.0.0.0 --port 8080

# PostgreSQL 관리 (필요시)
sudo apt install postgresql-client
psql -h localhost -U church_crm_user -d church_crm_db
```

🔒 보안 강화 설정
================================================================================

SSH 보안 강화:
```bash
# /etc/ssh/sshd_config 수정
sudo nano /etc/ssh/sshd_config

# 다음 설정 적용:
PermitRootLogin no
PasswordAuthentication no
PubkeyAuthentication yes
Port 22  # 또는 다른 포트로 변경
MaxAuthTries 3
ClientAliveInterval 300
ClientAliveCountMax 2

# SSH 서비스 재시작
sudo systemctl restart sshd
```

방화벽 설정:
```bash
# UFW 방화벽 활성화
sudo ufw enable

# 필요한 포트만 허용
sudo ufw allow from <your-ip> to any port 22
sudo ufw allow 80
sudo ufw allow 443
sudo ufw allow from <your-ip> to any port 8000

# 방화벽 상태 확인
sudo ufw status verbose
```

자동 보안 업데이트:
```bash
# unattended-upgrades 설치
sudo apt install unattended-upgrades

# 자동 업데이트 설정
sudo dpkg-reconfigure -plow unattended-upgrades
```

📊 성능 모니터링 도구
================================================================================

htop 설정:
```bash
# htop 설치 및 설정
sudo apt install htop
htop  # 실시간 시스템 모니터링
```

iotop (디스크 I/O 모니터링):
```bash
sudo apt install iotop
sudo iotop  # 디스크 사용량 모니터링
```

netstat (네트워크 연결 모니터링):
```bash
# 포트 사용 현황 확인
netstat -tlnp | grep :8000
netstat -tlnp | grep :80
```

Custom 모니터링 대시보드:
```python
#!/usr/bin/env python3
# ~/church-crm/scripts/dashboard.py

import psutil
import time
import os
from datetime import datetime

def get_system_info():
    # CPU 사용률
    cpu_percent = psutil.cpu_percent(interval=1)
    
    # 메모리 사용률
    memory = psutil.virtual_memory()
    
    # 디스크 사용률
    disk = psutil.disk_usage('/')
    
    # 네트워크 통계
    network = psutil.net_io_counters()
    
    return {
        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'cpu_percent': cpu_percent,
        'memory_percent': memory.percent,
        'memory_used': memory.used // (1024**3),  # GB
        'memory_total': memory.total // (1024**3),  # GB
        'disk_percent': (disk.used / disk.total) * 100,
        'disk_used': disk.used // (1024**3),  # GB
        'disk_total': disk.total // (1024**3),  # GB
        'network_sent': network.bytes_sent // (1024**2),  # MB
        'network_recv': network.bytes_recv // (1024**2),  # MB
    }

if __name__ == "__main__":
    while True:
        info = get_system_info()
        print(f"\n{'='*50}")
        print(f"시간: {info['timestamp']}")
        print(f"CPU: {info['cpu_percent']:.1f}%")
        print(f"메모리: {info['memory_percent']:.1f}% ({info['memory_used']}/{info['memory_total']} GB)")
        print(f"디스크: {info['disk_percent']:.1f}% ({info['disk_used']}/{info['disk_total']} GB)")
        print(f"네트워크: 송신 {info['network_sent']} MB, 수신 {info['network_recv']} MB")
        time.sleep(10)
```

🧪 테스트 및 배포 검증
================================================================================

연결 테스트:
```bash
# SSH 연결 테스트
ssh -T church-crm "echo 'SSH connection successful'"

# 웹 서비스 테스트
curl -I http://<static-ip>
curl -I http://<static-ip>:8000

# 포트 포워딩 테스트
curl -I http://localhost:8000  # 로컬에서 실행
```

기능 테스트:
```bash
# 데이터베이스 연결 테스트
cd ~/church-crm
source venv/bin/activate
python -c "from database.database import get_database; db = get_database(); print('DB 연결 성공')"

# 크롤링 모듈 테스트
python -c "from crawler_main import UnifiedCrawler; print('크롤링 모듈 로드 성공')"

# API 엔드포인트 테스트
curl http://localhost:8000/health
curl http://localhost:8000/api/stats/summary
```

성능 테스트:
```bash
# Apache Bench를 사용한 부하 테스트
sudo apt install apache2-utils
ab -n 1000 -c 10 http://localhost:8000/

# 메모리 사용량 모니터링
python ~/church-crm/scripts/dashboard.py
```

💾 데이터 마이그레이션 및 백업
================================================================================

로컬에서 서버로 데이터 전송:
```bash
# 데이터베이스 파일 업로드
scp database/churches_crm.db church-crm:~/church-crm/database/

# 설정 파일 업로드
scp .env church-crm:~/church-crm/

# 로그 파일 다운로드 (필요시)
scp church-crm:~/church-crm/logs/*.log ./logs/
```

자동 동기화 스크립트:
```bash
#!/bin/bash
# ~/church-crm/scripts/sync.sh

# 로컬 → 서버 동기화
rsync -avz --exclude='*.log' --exclude='__pycache__' \
    ./ church-crm:~/church-crm/

# 서버 → 로컬 백업
rsync -avz church-crm:~/church-crm/database/ ./backup/database/
rsync -avz church-crm:~/church-crm/logs/ ./backup/logs/
```

⚠️ 트러블슈팅 가이드
================================================================================

일반적인 문제 해결:

1. SSH 연결 실패:
```bash
# SSH 키 권한 확인
chmod 600 ~/.ssh/gcp_church_crm
chmod 644 ~/.ssh/gcp_church_crm.pub

# SSH 에이전트에 키 추가
ssh-add ~/.ssh/gcp_church_crm

# 상세 로그로 연결 시도
ssh -v church-crm
```

2. 웹 서비스 접속 불가:
```bash
# 서비스 상태 확인
sudo systemctl status church-crm
sudo systemctl status nginx

# 포트 사용 확인
sudo netstat -tlnp | grep :8000
sudo netstat -tlnp | grep :80

# 방화벽 규칙 확인
sudo ufw status
gcloud compute firewall-rules list
```

3. 데이터베이스 연결 오류:
```bash
# 파일 권한 확인
ls -la ~/church-crm/database/
chmod 644 ~/church-crm/database/churches_crm.db

# 디스크 공간 확인
df -h
```

4. 메모리 부족:
```bash
# 메모리 사용량 확인
free -h
ps aux --sort=-%mem | head

# 스왑 파일 생성 (필요시)
sudo fallocate -l 2G /swapfile
sudo chmod 600 /swapfile
sudo mkswap /swapfile
sudo swapon /swapfile
```

📞 원격 지원 및 협업
================================================================================

팀 협업을 위한 SSH 설정:
```bash
# 여러 개발자 SSH 키 등록
gcloud compute project-info add-metadata \
    --metadata-from-file ssh-keys=team_ssh_keys.txt

# 사용자별 권한 설정
sudo adduser developer2
sudo usermod -aG sudo developer2
```

원격 지원 도구:
```bash
# tmux 공유 세션
tmux new-session -d -s support
tmux attach-session -t support

# 화면 공유 (VNC 설치)
sudo apt install x11vnc xvfb
x11vnc -display :0 -auth ~/.Xauthority -forever -loop -noxdamage -repeat -rfbauth ~/.vnc/passwd -shared
```

실시간 로그 공유:
```bash
# 로그 스트리밍 웹 인터페이스
pip install websocket-client
python ~/church-crm/scripts/log_streamer.py
```

✅ 최종 배포 체크리스트
================================================================================

인프라 준비:
□ GCP 프로젝트 생성 및 $300 크레딧 확인
□ Compute Engine 인스턴스 생성 (e2-medium)
□ 고정 IP 주소 할당
□ 방화벽 규칙 설정 (SSH, HTTP, HTTPS)
□ SSH 키 생성 및 등록

서버 환경 구축:
□ Ubuntu 22.04 LTS 설치 확인
□ 필수 패키지 설치 (Python, Git, Docker 등)
□ Python 가상환경 생성
□ 프로젝트 코드 배포
□ 의존성 패키지 설치

데이터베이스 설정:
□ SQLite 파일 업로드 또는 PostgreSQL 설치
□ 데이터 마이그레이션 완료
□ 데이터베이스 연결 테스트
□ 백업 스크립트 설정

웹서버 설정:
□ Nginx 설정 및 테스트
□ Systemd 서비스 등록
□ SSL 인증서 설정 (Let's Encrypt)
□ 도메인 연결 (선택사항)

SSH 원격 환경:
□ SSH 키 기반 인증 설정
□ VS Code Remote SSH 연결 테스트
□ 포트 포워딩 설정
□ tmux/screen 세션 관리 설정

모니터링 및 백업:
□ 시스템 모니터링 스크립트 설정
□ 자동 백업 스크립트 설정
□ Cron 작업 등록
□ Cloud Storage 백업 연동

보안 설정:
□ SSH 보안 강화 (키 인증, 포트 변경)
□ 방화벽 설정 (UFW)
□ 자동 보안 업데이트 설정
□ 접근 로그 모니터링

기능 테스트:
□ 웹 애플리케이션 접속 테스트
□ API 엔드포인트 테스트
□ 크롤링 기능 테스트
□ 데이터베이스 CRUD 테스트
□ 파일 업로드/다운로드 테스트

성능 테스트:
□ 부하 테스트 (Apache Bench)
□ 메모리 사용량 모니터링
□ 응답 시간 측정
□ 동시 접속 테스트

📊 예상 일정 (SSH 중심)
================================================================================

총 소요 기간: 3일

Day 1: 인프라 구축 및 SSH 환경 설정
• GCP 인스턴스 생성 및 네트워크 설정 (2시간)
• SSH 키 설정 및 원격 접속 환경 구축 (2시간)
• 서버 기본 환경 설정 (Python, Git 등) (4시간)

Day 2: 애플리케이션 배포 및 웹서버 설정
• 프로젝트 코드 배포 및 의존성 설치 (2시간)
• 데이터베이스 설정 및 마이그레이션 (2시간)
• Nginx 및 Systemd 서비스 설정 (4시간)

Day 3: 모니터링, 백업, 보안 설정
• 모니터링 도구 및 스크립트 설정 (3시간)
• 자동 백업 시스템 구축 (2시간)
• 보안 강화 및 최종 테스트 (3시간)

🎯 성공 기준
================================================================================

기술적 성공 기준:
• SSH를 통한 완전한 원격 서버 제어 가능
• VS Code Remote SSH로 원격 개발 환경 구축
• 모든 기존 기능이 클라우드에서 정상 동작
• 24/7 안정적인 서비스 운영
• 응답 시간 3초 이내 유지

운영 효율성:
• 자동 백업 시스템 구축 (일일 백업)
• 실시간 모니터링 및 알림 시스템
• 원격 개발 및 배포 파이프라인 구축
• 보안 정책 적용 (SSH 키 인증, 방화벽)

비용 효율성:
• 월 $60 이내 비용 유지 (5개월 무료 운영)
• 필요시 e2-micro로 다운그레이드하여 영구 무료 운영
• Cloud Storage 백업 비용 최소화

개발 생산성:
• 로컬과 동일한 개발 환경 구축
• Git 기반 코드 관리 및 배포
• 실시간 로그 모니터링 및 디버깅
• tmux를 통한 세션 관리 및 백그라운드 작업

================================================================================
                              SSH 중심 배포 계획 완료
================================================================================

이 계획서는 SSH 원격 접속을 선호하는 개발자를 위한 완전한 GCP 배포 
가이드입니다. 전통적인 VPS 관리 방식과 클라우드의 장점을 결합하여
최대한의 제어권과 유연성을 제공합니다.

핵심 장점:
• SSH를 통한 완전한 서버 제어권
• VS Code Remote SSH로 원격 개발 환경
• tmux/screen을 통한 세션 관리
• 전통적인 Linux 서버 관리 방식
• GCP의 안정성과 확장성 활용

다음 단계: GCP 계정 생성 후 Compute Engine 인스턴스 생성부터 시작
예상 성공률: 95% (검증된 SSH 기반 배포 방식)
권장 시작일: 즉시 가능