#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Í∏∞Í¥Ä Í¥ÄÎ¶¨ ÏÑúÎπÑÏä§ - PostgreSQL ÏôÑÏ†Ñ Ìò∏Ìôò
"""

import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass
import psycopg2.extras

from database.database import get_database
from utils.logger_utils import LoggerUtils

@dataclass
class OrganizationSearchFilter:
    """Í∏∞Í¥Ä Í≤ÄÏÉâ ÌïÑÌÑ∞"""
    search_term: Optional[str] = None
    organization_type: Optional[str] = None
    contact_status: Optional[str] = None
    priority: Optional[str] = None
    assigned_to: Optional[str] = None
    has_missing_contacts: bool = False
    created_after: Optional[datetime] = None
    created_before: Optional[datetime] = None

class OrganizationService:
    """Í∏∞Í¥Ä Í¥ÄÎ¶¨ ÏÑúÎπÑÏä§"""
    
    def __init__(self):
        """Ï¥àÍ∏∞Ìôî"""
        try:
            self.db = get_database()
            self.logger = LoggerUtils.setup_logger(name="organization_service", file_logging=False)
            
            # DB Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
            test_stats = self.db.get_dashboard_stats()
            self.logger.info(f"üè¢ Í∏∞Í¥Ä Í¥ÄÎ¶¨ ÏÑúÎπÑÏä§ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å - Ï¥ù Í∏∞Í¥Ä Ïàò: {test_stats.get('total_organizations', 0)}")
            
        except Exception as e:
            self.logger = LoggerUtils.setup_logger(name="organization_service", file_logging=False)
            self.logger.error(f"‚ùå Í∏∞Í¥Ä Í¥ÄÎ¶¨ ÏÑúÎπÑÏä§ Ï¥àÍ∏∞Ìôî Ïã§Ìå®: {str(e)}")
            raise
    
    def get_organizations_with_missing_contacts(self, limit: int = 100) -> List[Dict[str, Any]]:
        """ÎàÑÎùΩÎêú Ïó∞ÎùΩÏ≤ò Ï†ïÎ≥¥Í∞Ä ÏûàÎäî Í∏∞Í¥Ä Î™©Î°ù Ï°∞Ìöå"""
        try:
            query = """
            SELECT 
                id, name, type, category, homepage, phone, fax, email, address,
                contact_status, priority, assigned_to, created_at, updated_at,
                CASE 
                    WHEN phone IS NULL OR phone = '' THEN 1 ELSE 0 
                END +
                CASE 
                    WHEN fax IS NULL OR fax = '' THEN 1 ELSE 0 
                END +
                CASE 
                    WHEN email IS NULL OR email = '' THEN 1 ELSE 0 
                END +
                CASE 
                    WHEN homepage IS NULL OR homepage = '' THEN 1 ELSE 0 
                END +
                CASE 
                    WHEN address IS NULL OR address = '' THEN 1 ELSE 0 
                END as missing_count
            FROM organizations 
            WHERE is_active = true
            AND (
                phone IS NULL OR phone = '' OR
                fax IS NULL OR fax = '' OR
                email IS NULL OR email = '' OR
                homepage IS NULL OR homepage = '' OR
                address IS NULL OR address = ''
            )
            ORDER BY missing_count DESC, priority ASC, updated_at DESC
            LIMIT %s
            """
            
            with self.db.get_connection() as conn:
                cursor = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
                cursor.execute(query, (limit,))
                organizations = []
                
                for row in cursor.fetchall():
                    org = dict(row)
                    
                    # ÎàÑÎùΩÎêú ÌïÑÎìú Î™©Î°ù ÏÉùÏÑ±
                    missing_fields = []
                    if not org.get('phone') or str(org['phone']).strip() == '':
                        missing_fields.append('phone')
                    if not org.get('fax') or str(org['fax']).strip() == '':
                        missing_fields.append('fax')
                    if not org.get('email') or str(org['email']).strip() == '':
                        missing_fields.append('email')
                    if not org.get('homepage') or str(org['homepage']).strip() == '':
                        missing_fields.append('homepage')
                    if not org.get('address') or str(org['address']).strip() == '':
                        missing_fields.append('address')
                    
                    org['missing_fields'] = missing_fields
                    org['missing_count'] = len(missing_fields)
                    organizations.append(org)
                
                return organizations
                
        except Exception as e:
            self.logger.error(f"‚ùå ÎàÑÎùΩ Ïó∞ÎùΩÏ≤ò Í∏∞Í¥Ä Ï°∞Ìöå Ïã§Ìå®: {str(e)}")
            return []
    
    def search_organizations(self, filters: OrganizationSearchFilter, 
                           page: int = 1, per_page: int = 20) -> Dict[str, Any]:
        """Í≥†Í∏â Í∏∞Í¥Ä Í≤ÄÏÉâ - PostgreSQL Ìò∏Ìôò"""
        try:
            # Í∏∞Î≥∏ ÏøºÎ¶¨
            base_query = """
            SELECT 
                id, name, type, category, homepage, phone, fax, email, address,
                contact_status, priority, assigned_to, lead_source,
                last_contact_date, next_follow_up_date,
                created_at, updated_at, created_by
            FROM organizations 
            WHERE is_active = true
            """
            
            conditions = []
            params = []
            
            # Í≤ÄÏÉâ Ï°∞Í±¥ Ï∂îÍ∞Ä (PostgreSQL ILIKE Î¨∏Î≤ï)
            if filters.search_term:
                conditions.append("(name ILIKE %s OR address ILIKE %s OR email ILIKE %s)")
                search_pattern = f"%{filters.search_term}%"
                params.extend([search_pattern, search_pattern, search_pattern])
            
            if filters.organization_type:
                conditions.append("type = %s")
                params.append(filters.organization_type)
            
            if filters.contact_status:
                conditions.append("contact_status = %s")
                params.append(filters.contact_status)
            
            if filters.priority:
                conditions.append("priority = %s")
                params.append(filters.priority)
            
            if filters.assigned_to:
                conditions.append("assigned_to = %s")
                params.append(filters.assigned_to)
            
            if filters.has_missing_contacts:
                conditions.append("""(
                    phone IS NULL OR phone = '' OR
                    fax IS NULL OR fax = '' OR
                    email IS NULL OR email = '' OR
                    homepage IS NULL OR homepage = '' OR
                    address IS NULL OR address = ''
                )""")
            
            if filters.created_after:
                conditions.append("created_at >= %s")
                params.append(filters.created_after)
            
            if filters.created_before:
                conditions.append("created_at <= %s")
                params.append(filters.created_before)
            
            # Ï°∞Í±¥ Í≤∞Ìï©
            if conditions:
                base_query += " AND " + " AND ".join(conditions)
            
            # Ï†ïÎ†¨
            base_query += " ORDER BY updated_at DESC"
            
            # Ï¥ù Í∞úÏàò Ï°∞Ìöå
            count_query = """
            SELECT COUNT(*) as total
            FROM organizations 
            WHERE is_active = true
            """
            
            if conditions:
                count_query += " AND " + " AND ".join(conditions)
            
            with self.db.get_connection() as conn:
                cursor = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
                
                # Ï¥ù Í∞úÏàò Ï°∞Ìöå
                cursor.execute(count_query, params)
                count_result = cursor.fetchone()
                total_count = count_result['total'] if count_result else 0
                
                # ÌéòÏù¥Ïßï Ï†ÅÏö©
                offset = (page - 1) * per_page
                paginated_query = base_query + " LIMIT %s OFFSET %s"
                params.extend([per_page, offset])
                
                # Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
                cursor.execute(paginated_query, params)
                organizations = [dict(row) for row in cursor.fetchall()]
                
                return {
                    'organizations': organizations,
                    'pagination': {
                        'page': page,
                        'per_page': per_page,
                        'total_count': total_count,
                        'total_pages': (total_count + per_page - 1) // per_page
                    }
                }
                
        except Exception as e:
            self.logger.error(f"‚ùå Í∏∞Í¥Ä Í≤ÄÏÉâ Ïã§Ìå®: {str(e)}")
            return {
                'organizations': [],
                'pagination': {
                    'page': page,
                    'per_page': per_page,
                    'total_count': 0,
                    'total_pages': 0
                }
            }
    
    def get_contact_statistics(self) -> Dict[str, Any]:
        """Ïó∞ÎùΩÏ≤ò ÌÜµÍ≥Ñ Ï°∞Ìöå"""
        try:
            with self.db.get_connection() as conn:
                cursor = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
                
                # Ï†ÑÏ≤¥ Í∏∞Í¥Ä Ïàò
                cursor.execute("SELECT COUNT(*) as total FROM organizations WHERE is_active = true")
                total_orgs = cursor.fetchone()['total']
                
                # ÌïÑÎìúÎ≥Ñ ÏôÑÏÑ±ÎèÑ ÌÜµÍ≥Ñ
                stats = {}
                contact_fields = ['phone', 'fax', 'email', 'homepage', 'address']
                
                for field in contact_fields:
                    cursor.execute(f"""
                        SELECT 
                            COUNT(*) as total,
                            SUM(CASE WHEN {field} IS NOT NULL AND {field} != '' THEN 1 ELSE 0 END) as filled
                        FROM organizations 
                        WHERE is_active = true
                    """)
                    
                    row = cursor.fetchone()
                    total = row['total']
                    filled = row['filled']
                    missing = total - filled
                    
                    stats[field] = {
                        "total": total,
                        "filled": filled,
                        "missing": missing,
                        "completion_rate": (filled / total * 100) if total > 0 else 0
                    }
                
                # ÎàÑÎùΩ ÌïÑÎìú ÏàòÎ≥Ñ Í∏∞Í¥Ä Î∂ÑÌè¨
                cursor.execute("""
                    SELECT 
                        (CASE WHEN phone IS NULL OR phone = '' THEN 1 ELSE 0 END +
                         CASE WHEN fax IS NULL OR fax = '' THEN 1 ELSE 0 END +
                         CASE WHEN email IS NULL OR email = '' THEN 1 ELSE 0 END +
                         CASE WHEN homepage IS NULL OR homepage = '' THEN 1 ELSE 0 END +
                         CASE WHEN address IS NULL OR address = '' THEN 1 ELSE 0 END) as missing_count,
                        COUNT(*) as org_count
                    FROM organizations 
                    WHERE is_active = true
                    GROUP BY missing_count
                    ORDER BY missing_count
                """)
                
                missing_distribution = {row['missing_count']: row['org_count'] for row in cursor.fetchall()}
                
                # Ï†ÑÏ≤¥ ÏôÑÏÑ±ÎèÑ
                total_possible_fields = total_orgs * len(contact_fields)
                total_filled_fields = sum(stats[field]['filled'] for field in contact_fields)
                overall_completion = (total_filled_fields / total_possible_fields * 100) if total_possible_fields > 0 else 0
                
                return {
                    "total_organizations": total_orgs,
                    "field_statistics": stats,
                    "missing_distribution": missing_distribution,
                    "overall_completion_rate": overall_completion,
                    "organizations_needing_enrichment": sum(missing_distribution.get(i, 0) for i in range(1, 6)),
                    "complete_organizations": missing_distribution.get(0, 0)
                }
                
        except Exception as e:
            self.logger.error(f"‚ùå Ïó∞ÎùΩÏ≤ò ÌÜµÍ≥Ñ Ï°∞Ìöå Ïã§Ìå®: {str(e)}")
            return {}
    
    def get_enrichment_candidates_with_pagination(self, page=1, per_page=50, priority=None):
        """ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖòÎêú Î≥¥Í∞ï ÌõÑÎ≥¥ Ï°∞Ìöå - PostgreSQL ÏôÑÏ†Ñ Ìò∏Ìôò"""
        try:
            base_query = """
            SELECT 
                id, name, type, category, homepage, phone, fax, email, address,
                contact_status, priority, assigned_to, created_at, updated_at
            FROM organizations 
            WHERE is_active = true
            AND (
                phone IS NULL OR phone = '' OR
                fax IS NULL OR fax = '' OR
                email IS NULL OR email = '' OR
                homepage IS NULL OR homepage = '' OR
                address IS NULL OR address = ''
            )
            """
            
            params = []
            if priority:
                base_query += " AND priority = %s"
                params.append(priority)
            
            base_query += " ORDER BY updated_at DESC"
            
            # Ï¥ù Í∞úÏàò Ï°∞Ìöå ÏøºÎ¶¨
            count_query = """
            SELECT COUNT(*) as total
            FROM organizations 
            WHERE is_active = true
            AND (
                phone IS NULL OR phone = '' OR
                fax IS NULL OR fax = '' OR
                email IS NULL OR email = '' OR
                homepage IS NULL OR homepage = '' OR
                address IS NULL OR address = ''
            )
            """
            
            if priority:
                count_query += " AND priority = %s"
            
            with self.db.get_connection() as conn:
                cursor = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
                
                # Ï¥ù Í∞úÏàò Ï°∞Ìöå
                cursor.execute(count_query, params)
                count_result = cursor.fetchone()
                total_count = count_result['total'] if count_result else 0
                
                # ÌéòÏù¥Ïßï Ï†ÅÏö©
                offset = (page - 1) * per_page
                paginated_query = base_query + " LIMIT %s OFFSET %s"
                params.extend([per_page, offset])
                
                cursor.execute(paginated_query, params)
                organizations = [dict(row) for row in cursor.fetchall()]
                
                return {
                    'organizations': organizations,
                    'pagination': {
                        'page': page,
                        'per_page': per_page,
                        'total_count': total_count,
                        'total_pages': (total_count + per_page - 1) // per_page
                    }
                }
                
        except Exception as e:
            self.logger.error(f"‚ùå ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò Î≥¥Í∞ï ÌõÑÎ≥¥ Ï°∞Ìöå Ïã§Ìå®: {str(e)}")
            return {
                'organizations': [],
                'pagination': {
                    'page': page,
                    'per_page': per_page,
                    'total_count': 0,
                    'total_pages': 0
                }
            }

    def get_enrichment_candidates(self, priority: str = None, limit: int = 50) -> List[Dict[str, Any]]:
        """Î≥¥Í∞ï ÌõÑÎ≥¥ Ï°∞Ìöå - PostgreSQL Ìò∏Ìôò"""
        try:
            query = """
            SELECT 
                id, name, type, category, homepage, phone, fax, email, address,
                contact_status, priority, assigned_to, created_at, updated_at,
                CASE 
                    WHEN phone IS NULL OR phone = '' THEN 1 ELSE 0 
                END +
                CASE 
                    WHEN fax IS NULL OR fax = '' THEN 1 ELSE 0 
                END +
                CASE 
                    WHEN email IS NULL OR email = '' THEN 1 ELSE 0 
                END +
                CASE 
                    WHEN homepage IS NULL OR homepage = '' THEN 1 ELSE 0 
                END +
                CASE 
                    WHEN address IS NULL OR address = '' THEN 1 ELSE 0 
                END as missing_count
            FROM organizations 
            WHERE is_active = true
            AND (
                phone IS NULL OR phone = '' OR
                fax IS NULL OR fax = '' OR
                email IS NULL OR email = '' OR
                homepage IS NULL OR homepage = '' OR
                address IS NULL OR address = ''
            )
            """
            
            params = []
            if priority:
                query += " AND priority = %s"
                params.append(priority)
            
            query += """
            ORDER BY 
                CASE 
                    WHEN priority = 'HIGH' THEN 1
                    WHEN priority = 'MEDIUM' THEN 2
                    ELSE 3
                END,
                missing_count DESC,
                updated_at ASC
            LIMIT %s
            """
            
            params.append(limit)
            
            with self.db.get_connection() as conn:
                cursor = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
                cursor.execute(query, params)
                candidates = []
                
                for row in cursor.fetchall():
                    org = dict(row)
                    
                    # ÎàÑÎùΩÎêú ÌïÑÎìú ÏÉÅÏÑ∏ Î∂ÑÏÑù
                    missing_fields = []
                    if not org.get('phone') or str(org['phone']).strip() == '':
                        missing_fields.append('phone')
                    if not org.get('fax') or str(org['fax']).strip() == '':
                        missing_fields.append('fax')
                    if not org.get('email') or str(org['email']).strip() == '':
                        missing_fields.append('email')
                    if not org.get('homepage') or str(org['homepage']).strip() == '':
                        missing_fields.append('homepage')
                    if not org.get('address') or str(org['address']).strip() == '':
                        missing_fields.append('address')
                    
                    org['missing_fields'] = missing_fields
                    org['enrichment_priority'] = self._calculate_enrichment_priority(org)
                    candidates.append(org)
                
                return candidates
                
        except Exception as e:
            self.logger.error(f"‚ùå Î≥¥Í∞ï ÌõÑÎ≥¥ Ï°∞Ìöå Ïã§Ìå®: {str(e)}")
            return []
    
    def _calculate_enrichment_priority(self, org: Dict[str, Any]) -> str:
        """Ïó∞ÎùΩÏ≤ò Î≥¥Í∞ï Ïö∞ÏÑ†ÏàúÏúÑ Í≥ÑÏÇ∞"""
        score = 0
        
        # Í∏∞Í¥Ä Ïö∞ÏÑ†ÏàúÏúÑ
        if org.get('priority') == 'HIGH':
            score += 3
        elif org.get('priority') == 'MEDIUM':
            score += 2
        else:
            score += 1
        
        # ÎàÑÎùΩÎêú ÌïÑÎìú Ïàò
        missing_count = org.get('missing_count', 0)
        score += missing_count * 0.5
        
        # ÏµúÍ∑º ÏóÖÎç∞Ïù¥Ìä∏ Ïó¨Î∂Ä
        if org.get('updated_at'):
            try:
                if isinstance(org['updated_at'], str):
                    updated_date = datetime.fromisoformat(org['updated_at'].replace('Z', '+00:00'))
                else:
                    updated_date = org['updated_at']
                days_since_update = (datetime.now() - updated_date).days
                if days_since_update > 30:
                    score += 1
            except:
                pass
        
        # Ï†êÏàòÏóê Îî∞Î•∏ Ïö∞ÏÑ†ÏàúÏúÑ Î∞òÌôò
        if score >= 5:
            return "URGENT"
        elif score >= 3:
            return "HIGH"
        elif score >= 2:
            return "MEDIUM"
        else:
            return "LOW"

# Ìé∏Ïùò Ìï®ÏàòÎì§
def get_missing_contacts_summary(limit: int = 100) -> List[Dict[str, Any]]:
    """ÎàÑÎùΩÎêú Ïó∞ÎùΩÏ≤ò ÏöîÏïΩ Ï†ïÎ≥¥ Ï°∞Ìöå"""
    service = OrganizationService()
    return service.get_organizations_with_missing_contacts(limit)

def search_organizations_advanced(search_term: str = None, has_missing_contacts: bool = False, 
                                priority: str = None, page: int = 1, per_page: int = 20) -> Dict[str, Any]:
    """Í≥†Í∏â Í∏∞Í¥Ä Í≤ÄÏÉâ Ìé∏Ïùò Ìï®Ïàò"""
    service = OrganizationService()
    filters = OrganizationSearchFilter(
        search_term=search_term,
        has_missing_contacts=has_missing_contacts,
        priority=priority
    )
    return service.search_organizations(filters, page, per_page) 