1. login service 최종점검
2. 크롤링 엔진 고도화
 excel 삽입시 (user Importing)
  -> 기관명 / 주소 / 전화번호 / 팩스번호 / 홈페이지 / 이메일
   -> header 분배
    -> 아래의 시나리오대로 프레임을 정해놓고 추출
특정 기관만 전달받았을때
  -> Scenario 1
 - Scenario 1 : 기관만 주었을 때
  -> 기관 검색 후 모든 기관 df에 넣어놓고 address 추출
   -> 지역번호 / 지역 Mapping 으로 address에서 적합한 전화번호 추출
    -> 추출된 전화번호 기반으로 Fax 추출 (전화번호와의 유사성 검토)
     -> 지역 + 기관 + 홈페이지 검색 후 hompage 정보 추출
      -> bs4 방식으로 추출(+ JS 렌더링도 포함 )
       -> 홈페이지 모든 정보 파싱 -> 텍스트 전처리 -> chunking -> AI에게 전달 후 정제된 데이터 받음
  - Scenario 2 : 기관 + 주소
   -> 주소 축약정보(대전광역시 유성구 .... -> 대전) 대전 + 기관명 + 전화번호
   -> 주소 축약정보(대전광역시 유성구 .... -> 대전) 대전 + 기관명 + 팩스번호
   -> 주소 축약정보(대전광역시 유성구 .... -> 대전) 대전 + 기관명 + 홈페이지 추출
     -> bs4 방식 추출, 파싱 -> 텍서트전처리 -> chunking -> AI에게 전달후 정제된 데이터 받음
  - Scenario 3 : 기관 + 전화번호
   -> 전화번호 기반 지역명 Mapping( ex, 서울 : 02 / 강원 : 033 ) 주소추출
    -> 주소 축약정보 + 기관명 전화번호
    -> 주소 축약정보 + 기관명 팩스번호
    -> 주소 축약정보 + 기관명 홈페이지 
     -> bs4 방식 추출, 파싱 -> 텍서트전처리 -> chunking -> AI에게 전달후 정제된 데이터 받음
  --> 팩스번호까지 추출시 Homepage url추출
    -> 직접 접속, bs4 -> AI 데이터

   -> 유효성 검사 로직 추가
3. 간단한 정보 ChromaDB 에 Vetorizing 하여 집어넣기
4. Component 기반 프론트엔드 작업 고도화 -> front development ... .md 파일 참고
5. DB 스키마 migration 진행, DB접근권한등 -> 우선 GUI 방식으로 현재 psql 구조 확인, 프론트상으로 이 부분 구현 가능한지 체크
6. Contact info -> normal Staff
  -> 영업 DB 기준 Contact History 상세확인 
    -> 통화 완료 10% -> Keyman 정보 추출 / 통화 실패 -> 
    -> 이메일 전달 25% 
    -> 다시 전화옴 -> 50%
    -> 영업 시작 -> 60%, 3일 or 5일 or 7일 뒤 다시 연락